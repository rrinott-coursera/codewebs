package models;

import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import java.util.TreeSet;

import minions.Jasonizer;
import models.ast.AST;
import models.ast.Forest;
import models.ast.Node;

import org.json.JSONArray;
import org.json.JSONObject;

import util.FileSystem;

/**
 * Class: Program
 * Program is a class type which represents a students homework solution.
 * Most importantly, it has a list of all the underlying codeBlocks.
 */
public class Program {

	// The astID of the program
	private int id;

	// The result class of the unit test
	private int output;

	// The juiciest part of a program are the codeBlocks that it contains
<<<<<<< HEAD
	private List<CodeBlock> codeBlocks = null;
	
=======
	private List<CodeBlock> codeBlocks;

>>>>>>> 501001b7dd13daab676159e79421a60a35d3785f
	// Deprecated. This is unused (but we may want them later)
	private Set<CodeBlock> buggyCodeBlocks;

	// Eventually we want to track how many students each part corresponds to.
	private int students;

	// It is useful to keep these things around
	private AST tree;
	private int[][] map;
	private List<String> codeList;

	protected Program() {}

	public Program(Set<String> keywords, int astId, ArrayList<String> code, int[][] map,
			JSONObject root, int output) {
		this.codeList = code;
		this.map = map;
		this.id = astId;
		this.output = output;
		this.tree = new AST(root, keywords);
<<<<<<< HEAD
		this.buggyCodeBlocks = new HashSet<CodeBlock>();
=======
		createCodeBlocks();
>>>>>>> 501001b7dd13daab676159e79421a60a35d3785f
	}

	public static Program loadProgram(int astId, int output, Set<String> keywords) {
		JSONObject obj = FileSystem.loadAst(astId);
		ArrayList<String> code = FileSystem.loadCode(astId);
		int[][] map = FileSystem.loadMap(astId);
		JSONObject root = obj.getJSONObject("root");
		return new Program(keywords, astId, code, map, root, output);
	}

	public Program reduce() {
		Program reduced = new Program();
		
		reduced.map = null;
		reduced.id = this.id;
		reduced.tree = tree.getReduced();
		String codeString = reduced.tree.getCodeString(this);
		reduced.codeList = Arrays.asList(codeString.split("\\r?\\n"));
		reduced.createCodeBlocks();

		return reduced;
	}

	public List<CodeBlock> getCodeBlocks() {
	  if (codeBlocks == null) createCodeBlocks();
		return codeBlocks;
	}

	public boolean isCorrect() {
		return output == 0;
	}

	public void markAsBuggy(CodeBlock codeBlock) {
		buggyCodeBlocks.add(codeBlock);
	}

	public int getSmallestBugSize() {
		int smallestSize = tree.getSize();
		for(CodeBlock block: buggyCodeBlocks) {
			if (block.size() < smallestSize) {
				smallestSize = block.size();
			}
		}
		return smallestSize;
	}

	public int getId() {
		return id;
	}

	public List<String> getCodeList() {
		return codeList;
	}

	public int[][] getMap() {
		return map;
	}

	public Node getRoot() {
		return tree.getARoot();
	}

	public void saveToFile(String dir) {
		writeJsonToFile(dir);
		writeCodeToFile(dir);
		//writeMapToFile(dir);

	}

	/*private void writeMapToFile(String dirName, String map, int id) {
			FileSystem.createFile(dirName, id + ".map", map);
		}

		private void writeCodeToFile(String dirName, String code, int id) {
			FileSystem.createFile(dirName, id + ".txt", code);
		}*/

	private void writeJsonToFile(String dirName) {
		JSONObject json = Jasonizer.jsonify(tree);
		String name = "ast_" + id + ".json";
		FileSystem.createFile(dirName, name, json.toString(4));
	}
	
	private void writeCodeToFile(String dirName) {
		String codeString = getCodeString();
		String name = "ast_" + id + ".code";
		FileSystem.createFile(dirName, name, codeString);
	}
	
	public String getCodeString() {
		String codeString = "";
		for(String line : codeList) {
			codeString += line + "\n";
		}
		return codeString;
	}
	
	public int getOutput() {
		return this.output;
	}

	/**
	 * This is used by the expander and saves a "discovery" to file.
	 */
	public void markEquivalence(CodeBlock block, Equivalence eq) {
		String discDir = FileSystem.getDiscoveriesDir();
		String progDir = discDir + "/" + id;
		String fileName = block.getId() + "_" + eq.getName() + ".txt";
		FileSystem.createFile(progDir, fileName, block.getSubforest().getCodeString());
		throw new RuntimeException("depricated");
	}

	/**
	 * This is used by the expander and saves a "bug discovery" to file.
	 */
	public void markAsBuggy(CodeBlock block, Equivalence eq) {
		String discDir = FileSystem.getDiscoveriesDir();
		String progDir = discDir + "/" + id;
		String fileName = block.getId() + "_" + eq.getName() + "_attempt.txt";
		FileSystem.createFile(progDir, fileName, block.getSubforest().getCodeString());
		throw new RuntimeException("depricated");
	}
	
	@Override
	public boolean equals(Object o) {
		Program other = (Program)o;
		return other.tree.equals(tree);
	}
	
	@Override
	public int hashCode(){
		return tree.hashCode();
	}

	//---------------------- Privates --------------------------//

	/**
	 * Create all the code blocks for this program. Should only be called once
	 * per program. Maintains and constructs a list of unique forests and 
	 * contexts.
	 * Question: Is there any reason the constructor should not call this?
	 */
	private void createCodeBlocks() {
		if (codeBlocks != null) {
			throw new RuntimeException("Only call create code blocks once!");
		}
		codeBlocks = new ArrayList<CodeBlock>();
		for (int j = 0; j < tree.getSize(); j++) {

			List<CodeBlock> blocks = tree.makeCodeBlocks(this, j);
			codeBlocks.addAll(blocks);
		}
	}

}
